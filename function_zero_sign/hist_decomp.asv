%%--------------------------------------------------------%%
%%                    TVP-VAR package                     %%
%%--------------------------------------------------------%%
%%
%%  malpha = ssmooth(my, amZ, amG2, mH2, va0, mH02)
%%
%%  "ssmooth" implements simulation smoother
%%  by de Jong & Shephard (1995)
%%
%%  [model]
%%      y_t = D_t + Z_t*alpha_t + v_t,                 v_t ~ N(0, HH)              
%%      alpha_{t+1} = T_t*alpha_t + R_t*e_t,     e_t ~ N(0, QQ)
%%      
%%      G_t*H_t' = O
%%
%%      y_t:     nk*1 vector
%%      Z_t:     nk*np matrix
%%      alpha_t: np*1 vector
%%      G_t:     nk*(nk+np) matrix
%%      H_t:     np*(nk+np) matrix
%%
%%  [input]
%%      my:     response (ns*nk vector)
%%      amZ:    independent variable (nk*np*ns array)
%%      amG2:   G_t*G_t' (nk*nk*ns array)
%%      mH2:    H_t*H_t' = H*H' (np*np matrix)
%%      va0:    alpha_0 (np*1 vector)
%%      mH02:   H_0*H_0' (np*np matrix)
%%
%%  [output]
%%      malpha:  sampled state variable (np*ns matrix)
%%

function decomp_smooth = hist_decomp(my, ma, mb, mh, amZ, amG2, mH2, va0, mH02)

%%--- set variables ---%%

ns = size(my, 1);    % # of time periods
nk = size(my, 2);    % # of series
np = size(mH2, 1);    % # of state
nl = 4;              % # of lag

% va = va0;
% mP = mH02;
% vr = zeros(np, 1);
% mU = zeros(np);
% 
% me = zeros(nk, ns);
% amDinv = zeros(nk, nk, ns);
% amL = zeros(np, np, ns);
% meta = zeros(np, ns);

obsmean =zeros(nobs, nseries);
smooth1 =zeros(nobs, nseries);
smooth2 =zeros(nobs, nseries);
obsvar    = zeros(nobs, nseries);
nu_save   = zeros(nseries,nobs);
ft_save   = zeros(nseries,nseries*nobs); 
kg_save   = zeros(nstate,nseries*nobs);
at_save   = zeros(nobs,2*nstate);
pt_save   = zeros(2*nstate,2*nstate*nobs);
shock     = zeros(nobs, nshock);
st_save = zeros(nobs,nseries*nshock);

alpha = zeros(nk*nl,1);

ZZ = ([eye(nk) zeros(nk,nk*nl) ];

  TT = [reshape(mb(i,:),nk,nk*nl); ...
          eye(nk) zeros(nk,nk*(nl-1));...
          zeros(nk,nk)  eye(nk) zeros(nk,nk*(nl-2));...
          zeros(nk,nk*2)  eye(nk) zeros(nk,nk) ];

      
DD = zeros(nseries,1);
HH = zeros(nseries,nseries);
QQ = createcov(para(30:39,1));
VV = zeros(nshock,nseries);

At = zeros(nstate*2,1); 
Pt = dlyap(TT,RR*QQ*RR');  
RR = [RR; zeros(nstate,nshock)];

% compute likelihood with Kalman filter by Durbin & Koopman (2012, p85) 

t = 1;
while t <= nobs
   
   At1 = At;
   Pt1 = Pt;
   
   % Forecasting
   alphahat = TT*At1;
   Phat = TT*Pt1*TT' + RR*QQ*RR';
   yhat = ZZ*alphahat + DD;
   nu   = yy(t,:) - yhat';
   
   Ft   = ZZ*Phat*ZZ' + HH + ZZ*RR*VV + (ZZ*RR*VV)';
   Ft   = 0.5*(Ft + Ft');
   
   K_g = TT*Phat*ZZ'*inv(Ft);   % Kalman Gain
  
   at_save(t,:) = alphahat;
   pt_save(:,(t-1)*2*nstate+1:t*2*nstate) = Phat;
   
   loglh = loglh -0.5*size(yy, 2)*log(2*pi)-0.5*log(det(Ft)) ...
           - 0.5*nu*inv(Ft)*nu';
   
   % Updating
   At = alphahat + (Phat*ZZ' + RR*VV)*inv(Ft)*nu';
   Pt = Phat - (Phat*ZZ'+RR*VV)*inv(Ft)*(Phat*ZZ'+RR*VV)';
   
   %  store
%    obsmean(t,:) =yhat'  ; %alphahat(nstate/2,:)';
   
    obsmean(t,:) = ( ZZ*alphahat+DD)';
   
   obsvar(t,:)  = diag(Ft)';
   nu_save(:,t) = nu';
   Ft_save(:,(t-1)*nseries+1:t*nseries) = Ft;
   Kg_save(:,(t-1)*nseries+1:t*nseries) = K_g;
   
   t = t+1;
end  

% disturbance smoothing by Durbin & Koopman (2001, p??)
%                       by Durbin & Koopman (2012, p96)

r_t = zeros(nstate*2,1);
N_t = zeros(2*nstate,2*nstate); 
eta = zeros(nshock,nobs);

for t = nobs:-1:1 

  nu = nu_save(:,t);
  Ft =  Ft_save(:,(t-1)*nseries+1:t*nseries);
  K_g = Kg_save(:,(t-1)*nseries+1:t*nseries);
  Phat = pt_save(:,(t-1)*2*nstate+1:t*2*nstate);
  L_t = TT- K_g*ZZ; 
  eta(:,t) = QQ*RR'*r_t;
  
  r_t = ZZ'*inv(Ft)*nu + L_t'*r_t;     % Eq.(4.32)
  N_t = ZZ'*inv(Ft)*ZZ + L_t'*N_t*L_t; 
  
end

% /*   historical decomposition
% */

nvar    = nseries;

for  index = 1:nshock;
%    st1 = zeros(40,1);
   r1 = zeros(40,1);
   r1(index) = r_t(index);  
   
%    st1 = a1 + p1*r_t;  %QQ(index,index)/sum(diag(QQ)) ;  % initialize    
    st1 = a1;                                             % initialize   

 for i =1:nobs-1;   
      st_save(i,1+(index-1)*nvar:index*nvar ) = (ZZ*st1)';
    
     shock_tmp = zeros(nshock,1);
     shock_tmp(index) = eta(index,i);     
     st = TT*st1 + RR*shock_tmp; 
     st1 = st;
 end;
 
end;

%====================================================================
% 
%   End of  historical decomposition
%
%==================================================================== 

%--- Kalman filter ---%%

for i = 1 : ns
    
    TT = [reshape(mb(i,:),nk,nk*nl); ...
          eye(nk) zeros(nk,nk*(nl-1));...
          zeros(nk,nk)  eye(nk) zeros(nk,nk*(nl-2));...
          zeros(nk,nk*2)  eye(nk) zeros(nk,nk) ];
  
   % forecasting   
    alpha = TT*alpha;     
    mD = ZZ* mP * ZZ' + mh(:,:,i);  % amG2
    me(:, i) = my(i, :)' - (ZZ*alpha)';
    
    drD = rcond(mD);
    if isnan(drD) || (drD < eps*10^2)
        mDinv = eye(np) * 10;
    else
        mDinv = inv(mD);
    end
    amDinv(:, :, i) = mDinv;

    mK = TT*mP * ZZ' * mDinv; %Kalman Gain 
    
    amL(:, :, i) = eye(np) - mK * ZZ;
    
    % updating
    alpha = alpha + mK * me(:, i);
    mP = mP * amL(:, :, i)' + mH2;
    
end


%%--- simulation smoother ---%%

i = ns;
while i >= 1
    mC = mH2 - mH2 * mU * mH2;
    mC = (mC + mC')/2;
    [mCc, fl] = chol(mC, 'lower');
    drC = rcond(mC);
    if fl > 0
        mCc = eye(np) * 0.01;
        mCinv = eye(np) * 10^4;
    elseif isnan(drC) || (drC < eps*10^2)
        mCinv = eye(np) * 10^4;
    else
        mCinv = inv(mC);
    end
    
    veps = mCc * randn(np, 1);
    meta(:, i) = mH2 * vr + veps;
    mV = mH2 * mU * amL(:, :, i);

    vr = amZ(:,:,i)' * amDinv(:,:,i) * me(:, i) ...
       + amL(:,:,i)' * vr - mV' * mCinv * veps;
    mU = amZ(:,:,i)' * amDinv(:,:,i) * amZ(:,:,i) ...
       + amL(:,:,i)' * mU * amL(:,:,i) + mV' * mCinv * mV;

    i = i - 1;
end

mC = mH02 - mH02 * mU * mH02;
mC = (mC + mC')/2;
[mCc, fl] = chol(mC, 'lower');
if fl > 0
    mCc = eye(np) * 0.07;
end
veta0 = mH02 * vr + mCc *  randn(np, 1);

malpha = zeros(np, ns);
malpha(:, 1) = va0 + veta0;
for i = 1 : ns-1
    malpha(:, i+1) = malpha(:, i) + meta(:, i);
end
